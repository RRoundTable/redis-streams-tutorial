version: '3'

networks:
  redisclusternet:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/16

volumes:
  prometheus_data:
  grafana_data:


services:
  redis1:
    container_name: redis-1
    restart: always
    image: redis:${REDIS_VER}
    ports:
      - 7001:7001
    volumes:
      - ./configs/redis-1.conf:/etc/redis/redis.conf
    command:
      - redis-server
      - /etc/redis/redis.conf
    networks:
      redisclusternet:
        ipv4_address: 10.0.0.11

  redis2:
    container_name: redis-2
    restart: always
    image: redis:${REDIS_VER}
    ports:
      - 7002:7002
    volumes:
      - ./configs/redis-2.conf:/etc/redis/redis.conf
    command:
      - redis-server
      - /etc/redis/redis.conf
    depends_on:
      - redis1
    networks:
      redisclusternet:
        ipv4_address: 10.0.0.12

  redis3:
    container_name: redis-3
    restart: always
    image: redis:${REDIS_VER}
    ports:
      - 7003:7003
    volumes:
      - ./configs/redis-3.conf:/etc/redis/redis.conf
    command:
      - redis-server
      - /etc/redis/redis.conf
    depends_on:
      - redis2
    networks:
      redisclusternet:
        ipv4_address: 10.0.0.13

  redis4:
    container_name: redis-4
    restart: always
    image: redis:${REDIS_VER}
    ports:
      - 7004:7004
    volumes:
      - ./configs/redis-4.conf:/etc/redis/redis.conf
    command:
      - redis-server
      - /etc/redis/redis.conf
    networks:
      redisclusternet:
        ipv4_address: 10.0.0.14

  redis5:
    container_name: redis-5
    restart: always
    image: redis:${REDIS_VER}
    ports:
      - 7005:7005
    volumes:
      - ./configs/redis-5.conf:/etc/redis/redis.conf
    command:
      - redis-server
      - /etc/redis/redis.conf
    depends_on:
      - redis1
    networks:
      redisclusternet:
        ipv4_address: 10.0.0.15

  redis6:
    container_name: redis-6
    restart: always
    image: redis:${REDIS_VER}
    ports:
      - 7006:7006
    volumes:
      - ./configs/redis-6.conf:/etc/redis/redis.conf
    command:
      - redis-server
      - /etc/redis/redis.conf
    depends_on:
      - redis2
    networks:
      redisclusternet:
        ipv4_address: 10.0.0.16

  producer:
    image: python:3.8-alpine3.10
    restart: on-failure
    container_name: producer
    volumes:
      - ./app:/usr/local/cluster-tester:z
    entrypoint: /usr/local/cluster-tester/docker-entrypoint.sh
    networks:
      redisclusternet:
        ipv4_address: 10.0.0.20

  consumer:
    image: python:3.8-alpine3.10
    restart: on-failure
    container_name: consumer
    volumes:
      - ./app:/usr/local/cluster-tester:z
    entrypoint: /usr/local/cluster-tester/docker-entrypoint.sh
    networks:
      redisclusternet:
        ipv4_address: 10.0.0.21

  redis_exporter:
    container_name: redis_exporter
    restart: always
    image: oliver006/redis_exporter
    # 일반적으로 exporter는 환경변수로 대상 Redis 서버 URL을 지정합니다.
    # 여기서는 redis-1 컨테이너의 내부 IP와 포트를 사용합니다.
    environment:
      - REDIS_ADDR=10.0.0.11:7001
      - REDIS_EXPORTER_IS_CLUSTER=true
    ports:
      - "9121:9121"
    networks:
      redisclusternet:
        ipv4_address: 10.0.0.32

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./configs/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      # - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      # - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9090" ]
      interval: 10s
      timeout: 15s
      retries: 10
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      redisclusternet:
        ipv4_address: 10.0.0.31

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./configs/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/ds.yaml
      - grafana_data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_healthy
    links:
      - prometheus
    networks:
      redisclusternet:
        ipv4_address: 10.0.0.30
